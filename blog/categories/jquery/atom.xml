<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | Programming Rambling]]></title>
  <link href="http://mrzard.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://mrzard.github.com/"/>
  <updated>2013-03-25T12:52:22+01:00</updated>
  <id>http://mrzard.github.com/</id>
  <author>
    <name><![CDATA[Gonzalo MÃ­guez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drag and drop interaction made easy with jQuery (and jQuery UI)]]></title>
    <link href="http://mrzard.github.com/blog/2011/04/12/drag-and-drop-interaction-made-easy-with-jque/"/>
    <updated>2011-04-12T10:18:00+02:00</updated>
    <id>http://mrzard.github.com/blog/2011/04/12/drag-and-drop-interaction-made-easy-with-jque</id>
    <content type="html"><![CDATA[<p>Last week at work I had to make a drag-and-drop configurable homepage, where
individual news items had to had the ability to be moved and arranged in a
grid which represented the available placeholders on the homepage.</p>

<p>My work was made MUCH easier by the <a href="http://jqueryui.com/demos/draggable/">draggable</a> and <a href="http://jqueryui.com/demos/droppable/">droppable</a> plugins
in jQuery UI. I just had to add a class which I binded the draggable plugin
to to the news items and then add another class to the placeholders which I
binded to the droppable plugin.</p>

<p>In case it's of help for somebody, here's a quick 'skeleton' on top of which
you can code the drag&amp;drop interactions you want.</p>

<pre><code>var draggable_options = { helper: 'clone', /* makes the item 'move' a copy 
of itself rather than 'leave' the original area */ revert: 'invalid', /* makes 
the item return to its original position if not dropped in a 'droppable' area 
*/ cursor: 'move' // changes the cursor appearance on hover }; //we give the 
items the draggable plugin with the options $(".draggable").draggable(draggable_options); 
$(".droppable").droppable({ drop: function(event, ui) { /* detect where we 
dropped the draggable element, in my case, the key part was the element's id 
*/ var dropped_in = $(this).attr('id'); /* here i put '...' in the droppable 
container's body to inform the user 'something' is happening */ var context 
= $(this); context.html('...'); var dragged = $(ui.draggable); /* ui.draggable 
is a reference to the dropped element now you can use all jQuery functions 
like dragged.attr('id') to get its id, or dragged.html('whatever') to change 
its innerHTML, etc... */ /* Here comes interaction, the removal of '...' and 
display of the action results */ } });
</code></pre>
]]></content>
  </entry>
  
</feed>
