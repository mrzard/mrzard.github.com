<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Symfony2 | Programming Rambling]]></title>
  <link href="http://mrzard.github.com/blog/categories/symfony2/atom.xml" rel="self"/>
  <link href="http://mrzard.github.com/"/>
  <updated>2014-12-30T08:21:33+01:00</updated>
  <id>http://mrzard.github.com/</id>
  <author>
    <name><![CDATA[Gonzalo Míguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Billy is hiring! Middleweight PHP developer needed]]></title>
    <link href="http://mrzard.github.com/blog/2014/08/20/billy-is-hiring-middleweight-php-developer-needed/"/>
    <updated>2014-08-20T10:52:00+02:00</updated>
    <id>http://mrzard.github.com/blog/2014/08/20/billy-is-hiring-middleweight-php-developer-needed</id>
    <content type="html"><![CDATA[<p>As most of you know, since June 2nd I've taken the position of MVAS IT Manager at <a href="http://www.billymob.com">Billy Mobile</a>.</p>

<p>Well, the family is growing, and I need a pair of hands on my side.</p>

<p>Right now we are using some Symfony components (HttpFoundation, DependencyInjection, Configuration, Router, EventDispatcher, Console and Templating) and we are creating a lot of libraries for our own use which we control with Composer / Satis. We also are going to possibly include node.js in some of our apps.</p>

<p>Your job will be connecting our apps with 3rd party APIs, creating new libraries that connect us to different services, thinking of how to improve our metrics and having fun while doing so. We have three different areas were you can make impact (mobile web apps, a very custom adserver and a REST-ish API for native mobile apps).</p>

<p>We are looking for:</p>

<ul>
<li><p> A fun person to be around</p></li>
<li><p> All-around nice person</p></li>
<li><p> Middleweight PHP developer. You have some experience, but want to improve and / or take on new challenges. Or maybe you have a ton of experience, and you like this job posting!</p></li>
<li><p> Comfortable with MySQL (queries, indexes, joins...)</p></li>
<li><p> Comfortable with the Mediator pattern and design patterns in general</p></li>
<li><p> Comfortable with git and composer</p></li>
<li><p> Understands Dependency Injection</p></li>
<li><p> Can document code, or writes code so beautiful it's auto-commented (if this is you please teach me).</p></li>
<li><p> Maybe has a bit (or a lot) of experience with testing.</p></li>
<li><p> Maybe has experience with key-value stores (Redis, Memcached or other), and NoSQL solutions (MongoDB, CouchDB, ElasticSearch or other...)</p></li>
<li><p> <em>Strong english skills required</em> - this a must, as we are an international company that need to communicate clearly in English with both coworkers and partners.</p></li>
</ul>


<p>We are offering:</p>

<ul>
<li><p> Good salary and company perks</p></li>
<li><p> An environment were prototyping, putting your ideas out there and trying new stuff is encouraged</p></li>
<li><p> Lots of growth opportunities</p></li>
<li><p> The chance to impact a working business model</p></li>
<li><p> Working with yours truly which is AWESOME</p></li>
<li><p> Free coffee and soft drinks</p></li>
<li><p> Great coworkers</p></li>
</ul>


<p>Do you think you want this job? Then drop me an email at my name at billymob.com or <a href="https://www.linkedin.com/jobs2/view/11081010?trk=biz-overview-job-post">apply on LinkedIn</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Form Prototype for Collections in Symfony2]]></title>
    <link href="http://mrzard.github.com/blog/2013/10/30/customize-form-prototype-for-collections-in-symfony2/"/>
    <updated>2013-10-30T15:45:00+01:00</updated>
    <id>http://mrzard.github.com/blog/2013/10/30/customize-form-prototype-for-collections-in-symfony2</id>
    <content type="html"><![CDATA[<p>When working with complex forms, sometimes you will be in need of
creating a collection field type to manage relations. When this is the
case, you may find yourself in the need of tweaking how the ‘add’ form
shows.</p>

<p>It’s pretty simple. In twig the protoype can be found under
form.collection.vars.prototype and can be used as a regular form (i.e.
if your form.collection member form has a ‘name’, it will also be
available in form.collection.vars.protoype.name).</p>

<p>With this information now you can create a twig that recieves an ‘item’,
which can be either a form.collection member or a prototype, and it will
be rendered the same.</p>

<p>Finally, wherever you hold the collection html, you will have to output
something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>data-prototype="{% filter escape %}{% include 'prototype.twig' with { 'item': form.collection.vars.prototype } %}{% endfilter %}"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And your <code>prototype.twig</code> should look like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{{ form_row(item.field0) }}
</span><span class='line'>{{ form_row(item.field1) }}
</span><span class='line'>{{ form_row(item.field2) }}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This way, you will have access to the prototype as if it were a regular
form, and you can apply all the customization you want (you can user
form_widget and the other functions, or access the vars directly, etc...)</p>

<p>Creating the helper twig is optional though, but handy because you have
to use the escape filter to the twig so you can put it in the correct
data-attribute.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate CSRF token programatically in Symfony 2]]></title>
    <link href="http://mrzard.github.com/blog/2012/08/08/generate-csrf-token-programatically-in-symfon/"/>
    <updated>2012-08-08T16:28:29+02:00</updated>
    <id>http://mrzard.github.com/blog/2012/08/08/generate-csrf-token-programatically-in-symfon</id>
    <content type="html"><![CDATA[<p>If you find yourself in the need of generating a CSRF token for a 'built' Request
or something in that fashion, you can do it rather easily:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Generate CSRF token programatically  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$csrfProvider</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;form.csrf_provider&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$csrfToken</span> <span class="o">=</span> <span class="nv">$csrfProvider</span><span class="o">-&gt;</span><span class="na">generateCsrfToken</span><span class="p">(</span><span class="s1">&#39;unknown&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>'unknown'</em> is the default 'intention' of CSRF tokens in Symfony2, change 'unknown'
for the correct intention if you are using that option.</p>
]]></content>
  </entry>
  
</feed>
