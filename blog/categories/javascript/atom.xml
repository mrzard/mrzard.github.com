<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Programming Rambling]]></title>
  <link href="http://mrzard.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mrzard.github.com/"/>
  <updated>2015-03-25T15:28:57+01:00</updated>
  <id>http://mrzard.github.com/</id>
  <author>
    <name><![CDATA[Gonzalo MÃ­guez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamically activate tinyMCE on a given textarea.]]></title>
    <link href="http://mrzard.github.com/blog/2011/05/24/dynamically-activate-tinymce-on-a-given-texte/"/>
    <updated>2011-05-24T11:05:00+02:00</updated>
    <id>http://mrzard.github.com/blog/2011/05/24/dynamically-activate-tinymce-on-a-given-texte</id>
    <content type="html"><![CDATA[<p>If you are adding textareas dynamically and wish to enable tinyMCE on them,
you just have to add this on the javascript function that adds said textarea.</p>

<p><code>tinyMCE.execCommand('mceAddControl',false, id_of_addedtextarea);</code></p>

<p>Where 'id_of_addedtextarea' is what its name implies ;)</p>

<p>More detailed and better info here: <a href="http://blog.dileno.com/archive/201102/adding-tinymce-editor-dynamically-and-get-its-value/">http://blog.dileno.com/archive/201102/adding-tinymce-editor-dynamically-and-get-its-value/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drag and drop interaction made easy with jQuery (and jQuery UI)]]></title>
    <link href="http://mrzard.github.com/blog/2011/04/12/drag-and-drop-interaction-made-easy-with-jque/"/>
    <updated>2011-04-12T10:18:00+02:00</updated>
    <id>http://mrzard.github.com/blog/2011/04/12/drag-and-drop-interaction-made-easy-with-jque</id>
    <content type="html"><![CDATA[<p>Last week at work I had to make a drag-and-drop configurable homepage, where
individual news items had to had the ability to be moved and arranged in a
grid which represented the available placeholders on the homepage.</p>

<p>My work was made MUCH easier by the <a href="http://jqueryui.com/demos/draggable/">draggable</a> and <a href="http://jqueryui.com/demos/droppable/">droppable</a> plugins
in jQuery UI. I just had to add a class which I binded the draggable plugin
to to the news items and then add another class to the placeholders which I
binded to the droppable plugin.</p>

<p>In case it's of help for somebody, here's a quick 'skeleton' on top of which
you can code the drag&amp;drop interactions you want.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Draggable-Droppable example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">draggable_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">helper</span><span class="o">:</span> <span class="s1">&#39;clone&#39;</span><span class="p">,</span>    <span class="cm">/* makes the item &#39;move&#39; a copy of itself rather than </span>
</span><span class='line'><span class="cm">                        &#39;   leave&#39; the original area */</span>
</span><span class='line'>        <span class="nx">revert</span><span class="o">:</span> <span class="s1">&#39;invalid&#39;</span><span class="p">,</span>  <span class="cm">/* makes the item return to its original position </span>
</span><span class='line'><span class="cm">                            if not dropped in a &#39;droppable&#39; area */</span>
</span><span class='line'>        <span class="nx">cursor</span><span class="o">:</span> <span class="s1">&#39;move&#39;</span>      <span class="c1">// changes the cursor appearance on hover </span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//we give the items the draggable plugin with the options </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.draggable&quot;</span><span class="p">).</span><span class="nx">draggable</span><span class="p">(</span><span class="nx">draggable_options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.droppable&quot;</span><span class="p">).</span><span class="nx">droppable</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">drop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* detect where we dropped the draggable element, </span>
</span><span class='line'><span class="cm">        in my case, the key part was the element&#39;s id */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dropped_in</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* here i put &#39;...&#39; in the droppable container&#39;s body to inform </span>
</span><span class='line'><span class="cm">        the user &#39;something&#39; is happening */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dragged</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">draggable</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* ui.draggable is a reference to the dropped element. </span>
</span><span class='line'><span class="cm">        Now you can use all jQuery functions like dragged.attr(&#39;id&#39;) to get its id, </span>
</span><span class='line'><span class="cm">        or dragged.html(&#39;whatever&#39;) to change its innerHTML, etc... */</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Here comes interaction, the removal of &#39;...&#39; and </span>
</span><span class='line'><span class="cm">        display of the action results */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
